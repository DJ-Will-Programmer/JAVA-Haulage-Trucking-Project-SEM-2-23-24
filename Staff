//Tianna Lue-Lim: 2109411

package apgrouproject;

import java.time.LocalDate; //to store date objects
import java.util.List;
import java.util.Random;

/*needed for hibernate mapping*/
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.swing.JOptionPane;

import org.hibernate.Session;
import org.hibernate.Transaction;

import dbConnection.SessionFactoryBuilder;

/*hibernate mapping*/
@Entity
@Table(name="staff") //table name in db

public class Staff
{	
	/*attributes*/
	@Id
	@Column(name="staffId") //annotation
	protected String staffId;
	
	@Column(name="firstName")
	protected String firstName;
	
	@Column(name="lastName")
	protected String lastName;
	
	@Column(name="dateOfBirth")
	protected LocalDate dateOfBirth;
	
	@Column(name="telephone")
	protected String telephone;
	
	@Column(name="email")
	protected String email;
	
	@Column(name="officeLocation")
	protected String officeLocation;
	
	@Column(name="position")
	protected String position; //administrative, driver, or maintenance
	
	@Column(name="address1")
	protected String address1; //house number and street name
	
	@Column(name="address2")
	protected String address2; //town or city
	
	@Column(name="postOffice")
	protected String postOffice;
	
	@Column(name="parish")
	protected String parish;
	
	@Column(name="status")
	protected String status; //part-time or full-time
	
	//default constructor
	public Staff()
	{
		staffId = "";
		firstName = "";
		lastName = "";
		dateOfBirth = LocalDate.of(1999,1,1); //yyyy, mm, dd
		telephone = "";
		email = "";
		officeLocation = "";
		position = "";
		address1 = "";
		address2 = "";
		postOffice = "";
		parish = "";
		status = "";
	}
	
	//primary constructor
	public Staff(String staffId, String firstName, String lastName, LocalDate dateOfBirth, String telephone, String email, 
			String officeLocation, String position, String address1, String address2, String postOffice, String parish, String status) 
	{
		this.staffId = staffId;
		this.firstName = firstName;
		this.lastName = lastName;
		this.dateOfBirth = dateOfBirth;
		this.telephone = telephone;
		this.email = email;
		this.officeLocation = officeLocation;
		this.position = position;
		this.address1 = address1;
		this.address2 = address2;
		this.postOffice = postOffice;
		this.parish = parish;
		this.status = status;
	}
	
	//copy constructor
	public Staff(Staff staff) 
	{
		this.staffId = staff.staffId;
		this.firstName = staff.firstName;
		this.lastName = staff.lastName;
		this.dateOfBirth = staff.dateOfBirth;
		this.telephone = staff.telephone;
		this.email = staff.email;
		this.officeLocation = staff.officeLocation;
		this.position = staff.position;
		this.address1 = staff.address1;
		this.address2 = staff.address2;
		this.postOffice = staff.postOffice;
		this.parish = staff.parish;
		this.status = staff.status;
	}

	/*Accessors and Mutators*/
	public String getStaffId()
	{
		return staffId;
	}
	public void setStaffId(String staffId) 
	{
		this.staffId = staffId;
	}

	public String getFirstName()
	{
		return firstName;
	}
	public void setFirstName(String firstName)
	{
		this.firstName = firstName;
	}

	public String getLastName() 
	{
		return lastName;
	}
	public void setLastName(String lastName) 
	{
		this.lastName = lastName;
	}

	public LocalDate getDateOfBirth() 
	{
		return dateOfBirth;
	}
	public void setDateOfBirth(LocalDate dateOfBirth) 
	{
		this.dateOfBirth = dateOfBirth;
	}

	public String getTelephone() 
	{
		return telephone;
	}
	public void setTelephone(String telephone) 
	{
		this.telephone = telephone;
	}
	
	public String getEmail()
	{
		return email;
	}
	public void setEmail(String email) 
	{
		this.email = email;
	}

	public String getOfficeLocation() 
	{
		return officeLocation;
	}
	public void setOfficeLocation(String officeLocation) 
	{
		this.officeLocation = officeLocation;
	}

	public String getPosition() 
	{
		return position;
	}
	public void setPosition(String position) 
	{
		this.position = position;
	}

	public String getAddress1() 
	{
		return address1;
	}
	public void setAddress1(String address1) 
	{
		this.address1 = address1;
	}

	public String getAddress2()
	{
		return address2;
	}
	public void setAddress2(String address2) 
	{
		this.address2 = address2;
	}

	public String getPostOffice()
	{
		return postOffice;
	}
	public void setPostOffice(String postOffice)
	{
		this.postOffice = postOffice;
	}

	public String getParish() 
	{
		return parish;
	}
	public void setParish(String parish)
	{
		this.parish = parish;
	}
	
	public String getStatus() 
	{
		return status;
	}
	public void setStatus(String status)
	{
		this.status = status;
	}

	/*toString*/
	@Override
	public String toString() 
	{
		return "-----------------------------------------------------------------------------------------------\n"
				+ "Staff ID:\t\t\t" + staffId 
				+ "\nFirst Name:\t\t\t" + firstName 
				+ "\nLast Name:\t\t\t" + lastName 
				+ "\nDate Of Birth (yyyy-mm-dd):\t" + dateOfBirth 
				+ "\nTelephone:\t\t\t" + telephone 
				+ "\nEmail:\t\t\t\t" + email 
				+ "\nOffice Location:\t\t" + officeLocation
				+ "\nPosition:\t\t\t" + position
				+ "\nAddress:\t\t\t" + address1 + ", " + address2 + ", " + postOffice + ", " + parish 
				+ "\nStatus:\t\t\t\t" + status;
	}
	
	/*sets the staffId as a randomly-generated string consisting of 6 numerical values*/
	public String generateStaffId()
	{
		String chars = "0123456789";
		int length = 6;
		
		Random randomId = new Random();
		
		StringBuilder stringBuilder = new StringBuilder(length);
		
		for (int index = 0; index < length; index++)
		{
			stringBuilder.append(chars.charAt(randomId.nextInt(chars.length())));
		}
		return stringBuilder.toString();
	}
	
	/*retrieve all staff and place in list*/
	public List<Staff> readAllStaff()
	{
		Session session = SessionFactoryBuilder.getSessionFactory().openSession();
		List<Staff> staffList = session.createQuery("FROM Staff", Staff.class).list();;
		
		for (Staff staff : staffList)
		{
			System.out.println(staff + "\n");
		}
		return staffList;
	}
	
	/*retrieve all staff members with Driver position from database and place in list*/
	public List<Staff> driverFilter()
	{
		Session session = SessionFactoryBuilder.getSessionFactory().openSession();
		List<Staff> driverList = session.createQuery("FROM Staff WHERE position = 'Driver'", Staff.class).list();;
		
		return driverList;
	}
	
	/*for update staff form: locate the employee record using the ID number entered in the search frame*/
	public Staff locateEmployeeToUpdate(String id)
	{
		Session session = SessionFactoryBuilder.getSessionFactory().openSession();
		Staff staff = new Staff();
		
		try
		{
			staff = session.get(Staff.class, id);
			
			if(staff != null)
			{
				return staff;
			}
			else
			{
				JOptionPane.showMessageDialog(null, "Employee with ID number " + id + " does not exist.", "Error: Employee not found", JOptionPane.INFORMATION_MESSAGE);
				System.err.println("Employee with ID number " + id + " does not exist.");
			}
		}
		catch (Exception e)
		{
			System.err.println("Error retrieving employee: " + e.getMessage());
		}
		finally
		{
			session.close();
		}
		
		return staff;
	}
	
	/*method updates staff records in database using new data entered in update form*/
	public void updateStaff(Staff staff)
	{
		Session session = SessionFactoryBuilder.getSessionFactory().openSession();
		Transaction transaction = null;
		
		try
		{
			transaction = session.beginTransaction();
			JOptionPane.showMessageDialog(null, "Employee record updated.", "Success", JOptionPane.INFORMATION_MESSAGE);
			session.update(staff);
			transaction.commit();
		}
		//session.close();
		catch (Exception e)
		{
			if(transaction != null)
			{
				JOptionPane.showMessageDialog(null, "Could not update staff record.", "An error occured.", JOptionPane.INFORMATION_MESSAGE);
				transaction.rollback();
			}
			System.err.println("Could not update staff record: " + e.getMessage());
		}
	}
	
	/*create object of the staff class using the data obtained from the create form and write to database*/
	public void createStaffMember(Staff dataFromForm)
	{	
		Session session = SessionFactoryBuilder.getSessionFactory().openSession();
		Transaction transaction = null;
		
		try
		{
			transaction = session.beginTransaction();
			Staff staff = new Staff(dataFromForm);
						
			session.save(staff);
			transaction.commit();
			
			System.out.println(staff.toString());
			
		}
		catch (RuntimeException re)
		{
			if(transaction != null)
			{
				transaction.rollback();
			}
		}
		finally
		{
			session.close();
		}
	}
}
