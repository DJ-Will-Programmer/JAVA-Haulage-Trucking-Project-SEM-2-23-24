//William Hume ID:2007166
package apgrouproject;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import java.time.LocalDate;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Date;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import com.toedter.calendar.JCalendar;
import java.text.SimpleDateFormat;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class BookingForm extends JInternalFrame {

	private static final long serialVersionUID = 1L;
	private JButton generateInvoice, clear, orderPeriod, driverOrders, submitOrder;
	private JTextField nameField, emailField, phoneField;
	private JTextArea addressArea;
	private JPanel panel;
	private GridBagConstraints gbc;
	private JComboBox<String> routeAndRateComboBox;
	private final String timeOfDelivery[] = { "9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM",
			"3:00 PM", "4:00 PM", "5:00 PM", "6:00 PM", "7:00 PM", "8:00 PM" };
	private JComboBox<String> timeComboBox;
	private final String haulageType[] = { "sand", "gravel", "dirt", "marl", "equipment", "block", "steel", "boxes",
			"food items", "cement" };
	private JComboBox<String> haulageComboBox;
	private JComboBox<String> driverComboBox;
	private JComboBox<String> driver;
	private JCalendar date;
	private String invoiceNoValue;
	private JTable ordersTable;
	public static final Logger logger = LogManager.getLogger(BookingForm.class);

	// Creating form
	public BookingForm() {
		// Title of the window
		super("Java Haulage and Trucking Booking Form", true, true, true, true);

		// Adding the newWindowsProperties method so that the rate sheet window can
		// display
		newWindowProperties();

		// Create a JPanel with GridBagLayout
		panel = new JPanel(new GridBagLayout());
		getContentPane().add(panel);

		// Create GridBagConstraints
		gbc = new GridBagConstraints();
		gbc.insets = new Insets(5, 5, 5, 5); // Padding

		// Adding name label along with its dimensions
		gbc.gridx = 0;
		gbc.gridy = 0;
		panel.add(new JLabel("Personal or Company name: "), gbc);

		// Adding name text field
		nameField = new JTextField(50);
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.gridwidth = 2;
		panel.add(nameField, gbc);

		// Adding email address label
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 1;
		panel.add(new JLabel("Email: "), gbc);

		// Adding email address text field
		emailField = new JTextField(50);
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.gridwidth = 2;
		panel.add(emailField, gbc);

		// Adding an address label
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.gridwidth = 1;
		panel.add(new JLabel("Address: "), gbc);

		// Adding address text area
		addressArea = new JTextArea(5, 20);
		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.gridwidth = 2;
		panel.add(new JScrollPane(addressArea), gbc);

		// Adding phone number label
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.gridwidth = 1;
		panel.add(new JLabel("Phone: "), gbc);

		// Adding phone number field
		phoneField = new JTextField(12);
		gbc.gridx = 1;
		gbc.gridy = 3;
		gbc.gridwidth = 2;
		panel.add(phoneField, gbc);

		// Adding the delivery information (ie route and rate)
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.gridwidth = 1;
		panel.add(new JLabel("Route:"), gbc);

		// Adding route and rate combo box
		RateSheet rateSheet = new RateSheet();
		routeAndRateComboBox = rateSheet.displayRouteAndRate();
		gbc.gridx = 1;
		gbc.gridy = 4;
		gbc.gridwidth = 2;
		panel.add(routeAndRateComboBox, gbc);

		// Adding the type of item to be hauled combo box
		gbc.gridx = 0;
		gbc.gridy = 5;
		gbc.gridwidth = 1;
		panel.add(new JLabel("Haulage Type: "), gbc);

		// Adding haulage type combo box
		haulageComboBox = new JComboBox<String>(haulageType);
		gbc.gridx = 1;
		gbc.gridy = 5;
		gbc.gridwidth = 2;
		panel.add(haulageComboBox, gbc);

		// Adding calendar label
		gbc.gridx = 0;
		gbc.gridy = 6;
		gbc.gridwidth = 1;
		panel.add(new JLabel("Day: "), gbc);

		// Adding date option using the JCalendar class
		date = new JCalendar();
		gbc.gridx = 1;
		gbc.gridy = 6;
		gbc.gridwidth = 2;
		panel.add(date, gbc);

		// adding label for time
		gbc.gridx = 0;
		gbc.gridy = 7;
		gbc.gridwidth = 1;
		panel.add(new JLabel("Time of Delivery: "), gbc);

		// Adding time combo box
		timeComboBox = new JComboBox<String>(timeOfDelivery);
		gbc.gridx = 1;
		gbc.gridy = 7;
		gbc.gridwidth = 2;
		panel.add(timeComboBox, gbc);

		// Adding label to get the driver
		gbc.gridx = 0;
		gbc.gridy = 8;
		gbc.gridwidth = 1;
		panel.add(new JLabel("Driver: "), gbc);

		// Adding driver combo box to the form
		// Calling the staff class to retrieve the function that generates the code

		driver = driverForBooking();
		gbc.gridx = 1;
		gbc.gridy = 8;
		gbc.gridwidth = 2;
		panel.add(driver, gbc);
		// Adding the generate Invoice button
		generateInvoice = new JButton("Generate Invoice");
		gbc.gridx = 0;
		gbc.gridy = 9;
		gbc.gridwidth = 2;
		panel.add(generateInvoice, gbc);

		// String to get the auto generated invoice number for a order
		invoiceNoValue = Orders.generateInvoiceNumber();
		// Adding action listener to the generateInvoice button
		generateInvoice.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				getInvoice(invoiceNoValue);

				// Noting that the invoice has been generated
				logger.info("Invoice has been generated");
			}
		});

		// Adding button for submit order
		submitOrder = new JButton("Submit Order");
		gbc.gridx = 2;
		gbc.gridy = 9;
		gbc.gridwidth = 1;
		panel.add(submitOrder, gbc);

		// Adding action listen to the submitOrder button
		submitOrder.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Calling method to return the rate associated with a particular route from
				// rate sheet class
				RateSheet rateSheet = new RateSheet();
				double rate = rateSheet.getRate(routeAndRateComboBox);
				//Adding the inactive status to customer accounts
				Customer customer = new Customer();
				customer.addRateToInactiveAccounts(rate);
				// Creating variables to store data from the form to write it to the database

				// Converting date to string
				java.util.Date utilDate = date.getDate();
				Date selectedDate = new Date(utilDate.getTime());
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				String dateValue = dateFormat.format(utilDate);
				String nameValue = nameField.getText();
				String routeValue = (String) routeAndRateComboBox.getSelectedItem();
				String addressValue = addressArea.getText();
				String driverSelected = (String) driverComboBox.getSelectedItem();

				// Passing the selectedRouteAndRate object to the method to retrieve the
				// specific location the order was made from
				RateSheet rSheet1 = new RateSheet();
				String companyAddress = rSheet1.getSourceAddress(routeValue);

				// Writing to orders table

				if (dateValue.isEmpty() || nameValue.isEmpty() || routeValue.isEmpty() || driverSelected.isEmpty()
						|| companyAddress.isEmpty()) {
					JOptionPane.showMessageDialog(null,
							"Cannot record order table data because one or more fields is empty:",
							"Error: Blank Fields", JOptionPane.INFORMATION_MESSAGE, frameIcon);

				} else {
					// create new staff object with values entered
					Orders orders = new Orders(invoiceNoValue, nameValue, companyAddress, addressValue, rate,
							driverSelected, dateValue);
					orders.createOrders(orders); // call to function in Staff class that writes staff objects to
													// database
					JOptionPane.showMessageDialog(null, "Booking data stored to orders table: ", "Success",
							JOptionPane.INFORMATION_MESSAGE);

				}

			}
		});
		// Adding the clear button to the form
		clear = new JButton("Clear Form");
		gbc.gridx = 3;
		gbc.gridy = 9;
		gbc.gridwidth = 1;
		panel.add(clear, gbc);

		// Adding action listener to the clear button to clear the contents of the form
		// when clicked
		clear.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				clearForm();

				// Logging the action for the clear button
				logger.info("The information entered in this form has been cleared");
			}
		});

		// Adding the generate orders by data button
		orderPeriod = new JButton("Generate Orders By Period");
		gbc.gridx = 0;
		gbc.gridy = 10;
		gbc.gridwidth = 2;
		panel.add(orderPeriod, gbc);

		// Adding action listener to the oerderPeriod button
		orderPeriod.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Get the start and end periods from the user
				String startPeriod = JOptionPane.showInputDialog(null, "Enter the start date in the form yyyy-MM-dd",
						"Java Haulage and Trucking Start Period Input", JOptionPane.INFORMATION_MESSAGE);
				String endPeriod = JOptionPane.showInputDialog(null, "Enter the end date in the form yyyy-MM-dd",
						"Java Haulage and Trucking End Period Input", JOptionPane.INFORMATION_MESSAGE);
				Orders ord = new Orders();
				ord.searchAndDisplayByPeriod( startPeriod, endPeriod);
			}
		});
		// Adding the driverOrders button the form
		driverOrders = new JButton("Generate Driver Orders");
		gbc.gridx = 2;
		gbc.gridy = 10;
		gbc.gridwidth = 2;
		panel.add(driverOrders, gbc);

		// Adding action listener to the driverOrders button
		driverOrders.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Asking the admin to enter the name of driver the query
				String driverName = JOptionPane.showInputDialog(null,
						"Enter the name of the driver you want to search for:",
						"Java Haulage and Trucking Driver Search Input", JOptionPane.INFORMATION_MESSAGE);
				// Calling the method from the OrdersDatabase class
				SwingUtilities.invokeLater(() -> {
					Orders ordDriver = new Orders();
					ordDriver.searchAndDisplayByDriver(driverName);
				});
			}
		});
	}

	// Method sets the properties of the booking form window
	public void newWindowProperties() {
		this.setSize(600, 450);
		this.setVisible(true);
		this.setResizable(true);
	}

	// Method gets the information for an invoice for an order
	private void getInvoice(String invoiceNum) {

		// Calling method to return the rate associated with a particular route from
		// rate sheet class
		RateSheet rateSheet = new RateSheet();
		double rate = rateSheet.getRate(routeAndRateComboBox);

		// Convert the double to a string to write it to invoice below
		String newRate = Double.toString(rate);
		// Create the invoice statement by retrieving the user input data
		StringBuilder invoice = new StringBuilder();

		java.util.Date utilDate = date.getDate();
		Date selectedDate = new Date(utilDate.getTime());
		invoice.append("Date: ").append(selectedDate).append("\n");
		invoice.append("Invoice Number: ").append(invoiceNum).append("\n");
		invoice.append("Personal or Company name: ").append(nameField.getText()).append("\n");
		invoice.append("Address: ").append(addressArea.getText()).append("\n");
		invoice.append("Phone Number: ").append(phoneField.getText()).append("\n");

		// Retrieving route and rate from the route and rate combo box
		String selectedRouteAndRate = (String) routeAndRateComboBox.getSelectedItem();
		invoice.append("Route: ").append(selectedRouteAndRate).append("\n");

		// Writing the rate as a string from the function below
		invoice.append("Rate: ").append(newRate).append("\n");
		// Retrieving haulage type from the haulage combo box
		String selectedHaulageType = (String) haulageComboBox.getSelectedItem();
		invoice.append("Haulage Type: ").append(selectedHaulageType).append("\n");

		// Retrieving route and rate from the route and rate combo box
		String selectedTime = (String) timeComboBox.getSelectedItem();
		invoice.append("Time: ").append(selectedTime).append("\n");

		// Displays information in JOptionPane
		JOptionPane.showMessageDialog(this, invoice.toString(), "Java Haulage and Trucking Invoice",
				JOptionPane.INFORMATION_MESSAGE);

		// Logging what this fragment of code is doing
		logger.info("Data has been gathered for invoice generation.");

	}

	// Method to clear the form
	private void clearForm() {
		nameField.setText("");
		emailField.setText("");
		phoneField.setText("");
		addressArea.setText("");
		haulageComboBox.setSelectedIndex(0);
		routeAndRateComboBox.setSelectedIndex(0);
		timeComboBox.setSelectedIndex(0);
		date.getMinSelectableDate();
	}

	// Allows a driver to be selected from the staff class
	public JComboBox<String> driverForBooking() {
		Staff driver = new Staff();
		List<Staff> driverList = driver.driverFilter();

		driverComboBox = new JComboBox<String>();
		driverComboBox.setBounds(30, 30, 200, 30);

		for (Staff s : driverList) {
			System.out.println(s + "\n");
			driverComboBox.addItem(s.getFirstName() + " " + s.getLastName());
		}
		return driverComboBox;
	}
}
